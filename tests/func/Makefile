TOPDIR=$(shell pwd)

# export LD_PRELOAD =
CFLAGS := -D_KERNEL -fno-builtin -mips1 -DMEMSTART=0x80000000 -DMEMSIZE=0x04000 -DCPU_COUNT_PER_US=1000 -I $(TOPDIR)/include 
CFLAGS += -fno-reorder-blocks -fno-reorder-functions

# # export TOPDIR AR CFLAGS
CROSS_COMPILE ?= mipsel-linux-

TESTS = $(patsubst tests/%/,%,$(wildcard tests/*/))
TEST_MAIN_TARGETS = $(foreach test,$(TESTS),test-$(test))
INCLUDES = $(wildcard include/*)

TARGETS_PER_TEST = code.elf code.bin code.data test.s inst_ram.coe data_ram.coe inst_ram.mif data_ram.mif axi_ram.mif

listsrcs = $(wildcard tests/$(1)/$(2))
listobjs = $(patsubst %.S,%.o,$(call listsrcs,$(1),*.S)) \
		   $(patsubst %.c,%.o,$(call listsrcs,$(1),*.c))
listtargets = $(foreach target,$(TARGETS_PER_TEST),tests/$(1)/obj/$(target))

# List all real files to be generated
ALL_OBJS    = $(foreach test,$(TESTS),$(call listobjs,$(test)))
ALL_TARGETS = $(foreach test,$(TESTS),$(call listtargets,$(test)))
ALL_FILES_TO_GENERATE = $(ALL_OBJS) $(ALL_TARGETS)

.PHONY: all clean reset help $(TEST_MAIN_TARGETS)

all: $(TEST_MAIN_TARGETS) $(ALL_FILES_TO_GENERATE)

# Top rule for a test
test-%: $(call listtargets,%)
	@

%/test.s: %/code.elf
	${CROSS_COMPILE}objdump -alD $< > $@

%/axi_ram.mif: %/inst_ram.mif
	cp $< $@

# Feed file names with correct path into `convert`.
%/inst_ram.coe: convert %/code.bin %/code.data
	./convert \
		$(foreach target,code.bin code.data inst_ram.coe data_ram.coe inst_ram.mif data_ram.mif,$*/$(target))

# The following three are generated by `convert` above.
%/data_ram.coe: %/inst_ram.coe
	@

%/inst_ram.mif: %/inst_ram.coe
	@

%/data_ram.mif: %/inst_ram.coe
	@

%/code.bin: %/code.elf
	${CROSS_COMPILE}objcopy -O binary -j .text $< $@

%/code.data: %/code.elf
	${CROSS_COMPILE}objcopy -O binary -j .data $< $@

.SECONDEXPANSION:
tests/%/obj/code.elf: bin.lds $$(call listobjs,$$*)
	mkdir -p tests/$*/obj
	${CROSS_COMPILE}ld -g -T bin.lds -o $@ $(wordlist 2,$(words $^),$^)

bin.lds: bin.lds.S
	${CROSS_COMPILE}gcc -E -P -Umips -D_LOADER -U_MAIN $(CFLAGS) $< -o $@

convert: convert.c
	gcc $(ALIGNED) -std=c99 -o convert convert.c

clean:
	rm -rf $(foreach test,$(TESTS),tests/$(test)/obj)
	rm -f $(foreach test,$(TESTS),tests/$(test)/*.o)

reset:
	make clean
	rm -f bin.lds convert

print:
	@echo $(TESTS)
	@echo $(TEST_MAIN_TARGETS)
	@echo $(INCLUDES)
	@echo $(ALL_OBJS)
	@echo $(ALL_TARGETS)

help:
	@echo "#########################################################################"
	@echo "### help for compiling simple_func"
	@echo "#########################################################################"
	@echo "### options:"
	@echo "###     make      : get compiled result, saved under obj/ under each test
	@echo "###     make clean: remove tests/**/*.o and tests/**/obj/
	@echo "###     make reset: "make clean" and remove convert, bin.lds"
	@echo "###     make help : show help information"
	@echo "#########################################################################"

-include rules.make
